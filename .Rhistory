rm(list=ls())
swidrl()
library(swirl)
swirl()
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(students2, sex_class, c("sex", "class"))
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
?spread
submit()
extract_numeric("class5")
submit()
submit()
reset()
View(students3)
submit()
skip()
students4
submit()
submit()
submit()
?passed
passed
failed
play()
mutate(passed, status = "passed")
passed
nxt()
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "falied")
fafailed <- failed %>% mutate(status = "failed")
failed <- failed %>% mutate(status = "failed")
?rbind_list
rbind_list(passed, failed)
sat
submit()
submit()
set.seed(1234)
par(mar = C(0, 0, 0, 0))
C(0, 0, 0, 0)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
}
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
set.seed(2)
x = matrix(rnorm(50*2), ncol = 2)
x
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
x
km.out = kmeans(x,2,nstart=20)
km.out$cluster
plot(x, col=(km.out$cluster+1), main="K-Means Clustering Results with k=2", xlab="", ylab=", pch=20 cex=2")
set.seed(4)
km.out=kmeans(x,3,nstart=20)
km.out
plot(x, col=(km.out$cluster+1), main="K-Means Clustering
Results with K=3", xlab ="", ylab="", pch =20, cex =2)
set.seed(3)
km.out=kmeans(x,3,nstart=1)
km.out$tot.withinss
km.out=kmeans(x,3,nstart=20)
km.out$tot.withinss
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0,3), each = 5)
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, , xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], clab = "Column", ylab = "First right singular vector", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, , xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, , xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, , xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, , xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, , xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, , xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
par(mfrow = c(1, 2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), clab = "Column", ylab = "Prop. of variance explained")
par(mfrow = c(1, 2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), clab = "Column", ylab = "Prop. of variance explained",  pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
pca1 <- prcomp(dataMatrixOrdered, scale = TRUE)
plot(pca1$rotation[, 1], svd1$v[, 1], pch = 19, xlab = "Principal Component 1"),
ylab = "Right Singular Vector 1"
abline(c(0,1))
svd1 <- svd(scale(dataMatrixOrdered))
pca1 <- prcomp(dataMatrixOrdered, scale = TRUE)
plot(pca1$rotation[, 1], svd1$v[, 1], pch = 19, xlab = "Principal Component 1"),
ylab = "Right Singular Vector 1")
plot(pca1$rotation[, 1], svd1$v[, 1], pch = 19, xlab = "Principal Component 1",
ylab = "Right Singular Vector 1")
abline(c(0,1))
constantMatrix <- dataMatrixOrdered*0
for(i in 1:dim(dataMatrixOrdered)[1]){constantMatrix[i,] <- rep(c(0,1),each=5)}
svd1 <- svd(constantMatrix)
par(mfrow=c(1,3))
image(t(constantMatrix)[,nrow(constantMatrix):1])
plot(svd1$d,xlab="Column",ylab="Singular value",pch=19)
plot(svd1$d^2/sum(svd1$d^2),xlab="Column",ylab="Prop. of variance explained",pch=19)
## What if we add a second pattern?
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip1 <- rbinom(1, size = 1, prob = 0.5)
coinFlip2 <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip1) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), each = 5)
}
if (coinFlip2) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), 5)
}
}
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
##
## Singular value decomposition - true patterns
svd2 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rep(c(0, 1), each = 5), pch = 19, xlab = "Column", ylab = "Pattern 1")
plot(rep(c(0, 1), 5), pch = 19, xlab = "Column", ylab = "Pattern 2")
##
svd2 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd2$v[, 1], pch = 19, xlab = "Column", ylab = "First right singular vector")
plot(svd2$v[, 2], pch = 19, xlab = "Column", ylab = "Second right singular vector")
## d and variance explained
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
##
dataMatrix2 <- dataMatrixOrdered
## Randomly insert some missing data
dataMatrix2[sample(1:100, size = 40, replace = FALSE)] <- NA
svd1 <- svd(scale(dataMatrix2)) ## Doesn't work!
## Imputing {impute}
library(impute) ## Available from http://bioconductor.org
dataMatrix2 <- dataMatrixOrdered
dataMatrix2[sample(1:100,size=40,replace=FALSE)] <- NA
dataMatrix2 <- impute.knn(dataMatrix2)$data
svd1 <- svd(scale(dataMatrixOrdered)); svd2 <- svd(scale(dataMatrix2))
par(mfrow=c(1,2)); plot(svd1$v[,1],pch=19); plot(svd2$v[,1],pch=19)
install.packages("impute")
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
library(impute)
dataMatrix2 <- dataMatrixOrdered
dataMatrix2[sample(1:100,size=40,replace=FALSE)] <- NA
dataMatrix2 <- impute.knn(dataMatrix2)$data
svd1 <- svd(scale(dataMatrixOrdered)); svd2 <- svd(scale(dataMatrix2))
par(mfrow=c(1,2)); plot(svd1$v[,1],pch=19); plot(svd2$v[,1],pch=19)
## Face example
load("data/face.rda")
image(t(faceData)[, nrow(faceData):1])
load("face.rda")
load("data/face.rda")
View(faceData)
image(t(faceData)[, nrow(faceData):1])
svd1 <- svd(scale(faceData))
plot(svd1$d^2/sum(svd1$d^2), pch = 19, xlab = "Singular vector", ylab = "Variance explained")
svd1 <- svd(scale(faceData))
## Note that %*% is matrix multiplication
# Here svd1$d[1] is a constant
approx1 <- svd1$u[, 1] %*% t(svd1$v[, 1]) * svd1$d[1]
# In these examples we need to make the diagonal matrix out of d
approx5 <- svd1$u[, 1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[, 1:5])
approx10 <- svd1$u[, 1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[, 1:10])
par(mfrow = c(1, 4))
image(t(approx1)[, nrow(approx1):1], main = "(a)")
image(t(approx5)[, nrow(approx5):1], main = "(b)")
image(t(approx10)[, nrow(approx10):1], main = "(c)")
image(t(faceData)[, nrow(faceData):1], main = "(d)") ## Original data
par(mfrow = c(1, 4))
image(t(approx1)[, nrow(approx1):1], main = "(a)")
image(t(approx5)[, nrow(approx5):1], main = "(b)")
image(t(approx10)[, nrow(approx10):1], main = "(c)")
image(t(faceData)[, nrow(faceData):1], main = "(d)") ## Original data
?mean
x <- (1:100)
x
mean(x)
x <- c(5,5,5)
mean(x)
x <- rep(10,10)
x
mean(x)
x <- c(8,1,2,9,3,2,8,1,2)
mean(x)
median(x)
sort(x)
x <- c(1,2,2,2,2,3,3,4,5,6,7)
median(x)
mode(x)
?mode
a <- x
a
names(table(a))[table(a)==max(table(a))]
mean(x)
dt <- c(3.4, 2.5, 4.8, 2.9, 3.6, 2.8, 3.3, 5.6, 3.7, 2.8, 4.4, 4.0, 5.2, 3.0, 4.8)
mean(dt)
median(dt)
?dotplot
dotplot(dt)
?dotchart
dotchart(dt)
?trimmed
mean(dt, trim = 0.2)
wa <- c(18.71, 21.41, 20.72, 21.81, 19.29, 22.43, 20.17,
23.71, 19.44, 20.50, 18.92, 20.33, 23.00, 22.85,
19.25, 21.77, 22.11, 19.77, 18.04, 21.12)
wa
## Book Probability & Statistics for Engineers & Scientist
## Chapter 1 Exercises pag. 13
## 1.1 drying time (dt), in hours, for a brand of latex
dt <- c(3.4, 2.5, 4.8, 2.9, 3.6, 2.8, 3.3, 5.6, 3.7, 2.8, 4.4, 4.0, 5.2, 3.0, 4.8)
# a
mean(dt)
#
length(dt)
## Book Probability & Statistics for Engineers & Scientist
## Chapter 1 Exercises pag. 13
## 1.1 drying time (dt), in hours, for a brand of latex
dt <- c(3.4, 2.5, 4.8, 2.9, 3.6, 2.8, 3.3, 5.6, 3.7, 2.8, 4.4, 4.0, 5.2, 3.0, 4.8)
# a
length(dt)
#
## Book Probability & Statistics for Engineers & Scientist
## Chapter 1 Exercises pag. 13
## 1.1 drying time (dt), in hours, for a brand of latex
dt <- c(3.4, 2.5, 4.8, 2.9, 3.6, 2.8, 3.3, 5.6, 3.7, 2.8, 4.4, 4.0, 5.2, 3.0, 4.8)
# a
length(dt)
#
mean(wa)
median(wa)
mean(wa, trim = 0.1)
dotchart(wa)
nag <- c(227, 222, 218, 217, 225, 218, 216, 229, 228, 221)
## Aging:
ag <- c(219, 214, 215, 211, 209, 218, 203, 204, 201, 205)
# c) sample mean of both
mean(nag)
mean(ag)
median(nag)
median(ag)
A <- c(9.3, 8.8, 6.8, 8.7, 8.5, 6.7, 8.0, 6.5, 9.2, 7.0)
B <- c(11.0, 9.8, 9.9, 10.2, 10.1, 9.7, 11.0, 11.1, 10.2, 9.6)
mean(A)
median(A)
mean(B)
median(B)
?matrix
A
B
c(A,B)
AB <- matrix(c(A,B), nrow = 2)
AB
AB <- matrix(c(A,B), nrow = 10)
AB
?dotchart
dotchart(AB)
dotplot(AV)
dotplot(AB)
library(lattice)
dotplot(AB)
dotplot(AB, horizontal = TRUE)
dotplot(AB, horizontal = FALSE)
dotplot(AB, horizontal = TRUE)
?correlation
??correlation
?lm
cls
clc
clear
cls
?lm
?xtable
install.package("xtable")
install.packages("xtable")
activity <- read.csv("activity.csv")
activity$date <- as.Date(activity$date)
setwd("C:/Users/Carlos/Desktop/Practices/Coursera/Data Science Specialization/R Programming/R_working_directory/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
activity$date <- as.Date(activity$date)
sum(!complete.cases(activity))
activity$weekDayIntervalIndex <- weekdays(activity$date)
activity$weekDayIntervalIndex <- paste0(activity$weekDayIntervalIndex, activity$interval)
activityNonMissingData <- activity[!is.na(activity$steps), ]
activityMissingData <- activity[is.na(activity$steps), ]
medianPerWeekDayInterval <- activity %>%
group_by(weekDayIntervalIndex) %>%
summarise(steps = median(steps, na.rm = TRUE))
activityMissingData$steps <- NULL
activityMissingData <- inner_join(activityMissingData, medianPerWeekDayInterval)
activityFilledIn <- rbind(activityMissingData, activityNonMissingData)
activityFilledIn <- activityFilledIn %>% arrange(date, interval)
library(ggplot2)
library(dplyr)
medianPerWeekDayInterval <- activity %>%
group_by(weekDayIntervalIndex) %>%
summarise(steps = median(steps, na.rm = TRUE))
activityMissingData$steps <- NULL
activityMissingData <- inner_join(activityMissingData, medianPerWeekDayInterval)
activityFilledIn <- rbind(activityMissingData, activityNonMissingData)
activityFilledIn <- activityFilledIn %>% arrange(date, interval)
activityDayFilledIn <- activityFilledIn %>%
group_by(date) %>%
summarise(totalSteps = sum(steps))
View(activityFilledIn)
?weeksday
?weekdays
View(activityFilledIn)
View(activityDayFilledIn)
View(activityFilledIn)
weekend <- function(date) {
ifelse(is.element(weekdays(date), c("Saturday",  "Sunday")), "weekend", "weekday")
}
activityFilledIn$weekday <- weekend(activityFilledIn$date)
table(activityFilledIn$weekday)
View(activityFilledIn)
View(activityDayFilledIn)
View(activityFilledIn)
View(activityMissingData)
View(activityNonMissingData)
View(activityFilledIn)
activitywkd <- activityFilledIN %>%
group_by(weekday, interval) %>%
summarise(wkavgsteps = mean(steps))
activitywkd <- activityFilledIn %>%
group_by(weekday, interval) %>%
summarise(wkavgsteps = mean(steps))
ggplot(activitywkd, aes(interval, wkavgsteps)) +
geom_line(colour = "steelblue") +
facet_wrap( ~ weekday, ncol = 1) +
labs(x = "Interval", y = "Average steps") +
theme_bw()
ggplot(activitywkd, aes(interval, wkavgsteps)) +
geom_line(colour = "steelblue") +
facet_wrap( ~ weekday, ncol = 1) +
facet_wrap( ~ weekend, ncol = 2) +
labs(x = "Interval", y = "Average steps") +
theme_bw()
?ggplot
ggplot(activywkd, aes(x=interval, y=steps, group=1)) + geom_line() +
facet_wrap(~ day, ncol=1)
ggplot(activitywkd, aes(x=interval, y=steps, group=1)) + geom_line() +
facet_wrap(~ day, ncol=1)
ggplot(activitywkd, aes(x=interval, y=steps, group=1)) + geom_line() +
facet_wrap(~ day, ncol=1)
activitywkd <- activityFilledIn %>%
group_by(weekday, interval) %>%
summarise(wkavgsteps = mean(steps))
View(activitywkd)
View(medianPerWeekDayInterval)
View(activitywkd)
View(activityFilledIn)
View(activityFilledIn)
summarise(activityFilledIn)
str(activityFilledIn)
sum(activityFilledIn)
View(activitywkd)
to_date()
Sys.setlocale("LC_TIME", "en_US.UTF-8")
time()
gettime()
?time
date()
weekend <- function(date) {
ifelse(is.element(weekdays(date), c("Saturday",  "Sunday")), "weekend", "weekday")
}
activityFilledIn$weekday <- weekend(activityFilledIn$date)
table(activityFilledIn$weekday)
activityFilledIn$weekday <- weekend(activityFilledIn$date)
table(activityFilledIn$weekday)
View(activityFilledIn)
date()
getwd()
Sys.setlocale("LC_TIME", "en_US.UTF-8")
Sys.setlocale("LC_TIME", "en_US.US")
?Sys.setlocale
Sys.setlocale("LC_TIME", "English")
